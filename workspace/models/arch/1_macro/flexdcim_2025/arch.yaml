# ===========================================================================
# This file is organized according to the architecture outlined in figure 11 and
# according to the description of that architecture in section IV.c.
# this architectural description should match up very well with the structural
# description of the 8b supporting model in the paper
# ===========================================================================

{{include_text('defines.yaml')}}

architecture:
  nodes: &macro

  # ===========================================================================
  - !Container                                                                       # top-level macro
    name: macro
    <<<: [*container_defaults]
    attributes: {has_power_gating: USE_POWER_GATING}                                 # power-gated full adder specified on page 6

  # ===========================================================================
  # Core CiM Array (1)
  # ===========================================================================

  # - !ArrayContainer                                                              

  - !ArrayContainer                                                                  # each BLK consists of 64 SBLKs
    name: blk
    <<<: [*container_defaults, *spatial_must_reuse_inputs]
    spatial: {meshX: NUM_BLOCKS}
    constraints: {spatial: {maximize_dims: [[Y], [M]]}}
    max_utilization: {spatial: {factors: [('M=' + str(blk.get_fanout()))]}}

  - !ArrayContainer                                                                  # digital sub-block (SBLK) containing the 8 8x1 DPUs (which we will extend to be 32x1 by 4/28)
    name: sblk
    <<<: [*container_defaults, *spatial_must_reuse_outputs]
    spatial: {meshY: SBLKS_PER_BLOCK}
    constraints: {spatial: {maximize_dims: [[R, S, C]]}}
    max_utilization: {spatial: {factors: [('C=' + str(sblk.get_fanout()))]}}

  - !Component                                                                       # most fundamental unit of computation in the model, 8 SRAM cells wth accompanying small digital logic cell
    name: dpu
    <<<: [*component_defaults, *keep_weights, *no_coalesce]
    subclass: flexdcim_dpu
    attributes:
      width: CIM_UNIT_WIDTH_CELLS * BITS_PER_CELL
      switching_activity: SWITCHING_ACTIVITY
      power_gated: USE_POWER_GATING
      voltage: VOLTAGE
    area_scale: MEMORY_AREA_SCALE * (MASTER_PRECISION_FREE / 8.0) #MEMORY_AREA_SCALE
    energy_scale: MEMORY_ENERGY_SCALE

  - !Component
    name: adder_trees
    <<<: [*component_defaults, *keep_outputs, *no_coalesce]
    subclass: flexdcim_adder_tree
    attributes:
      width: OUTPUT_BITS
      n_inputs: SBLKS_PER_BLOCK * DPUS_PER_SBLK
      power_gated: USE_POWER_GATING
      voltage: VOLTAGE
      <<: *cim_component_attributes
    area_scale: ADDER_TREE_AREA_SCALE * (0.7 + 0.3 * log2(WEIGHT_BITS) / log2(8))
    energy_scale: ADDER_TREE_ENERGY_SCALE
  
  # ===========================================================================
  # CiM and SRAM Drivers (2)
  # ===========================================================================

  - !Component                                                                     # weight/SRAM drivers for writing weights to array
    name: sram_drivers
    <<<: [*component_defaults, *keep_weights, *no_coalesce]
    subclass: weight_row_drivers
    attributes:
      width: ARRAY_BITLINES
      voltage: VOLTAGE
      <<: *cim_component_attributes
    area_scale: SRAM_DRIVER_AREA_SCALE * (.9 + (0.1 * WEIGHT_BITS) / 8.0)
    energy_scale: SRAM_DRIVER_ENERGY_SCALE

  - !Component                                                                     # input/CIM drivers for activation distribution
    name: cim_drivers
    <<<: [*component_defaults, *keep_inputs, *no_coalesce]
    subclass: input_row_drivers
    attributes:
      width: DAC_RESOLUTION
      switching_activity: SWITCHING_ACTIVITY
      voltage: VOLTAGE
      <<: *cim_component_attributes
    area_scale: CIM_DRIVER_AREA_SCALE * (0.2 + 0.8 * INPUT_BITS / 8.0)
    energy_scale: CIM_DRIVER_ENERGY_SCALE

  # ===========================================================================
  # Control and Pre-charge (3)
  # ===========================================================================

  # TODO: don't these just correspond to column drivers? do we need to model
  #       these two separately?
  # I assumed that they were differentt based off of the paper's decision to specify each individually while enumerating the parts of the system. My understanding is that the column drivers apply weight values, but that the control and precharge are part of the

  - !Component
    name: control_precharge_circuits
    <<<: [*component_defaults, *keep_inputs, *no_coalesce]
    subclass: column_drivers
    attributes: {<<: *cim_component_attributes}
    area_scale: CONTROL_AREA_SCALE
    energy_scale: CONTROL_ENERGY_SCALE

  # - !Component                                                                     # control circuits described in IV.c.
  #   name: control_circuits
  #   <<<: [*component_defaults, *keep_inputs, *no_coalesce]
  #   subclass: flexdcim_control
  #   attributes: {<<: *cim_component_attributes}

  # - !Component                                                                     # pre-charging circuits (also described in IV.c.)
  #   name: precharge_circuits
  #   <<<: [*component_defaults, *keep_inputs, *no_coalesce]
  #   subclass: flexdcim_precharge
  #   attributes:
  #     voltage: VOLTAGE
  #     <<: *cim_component_attributes

  # # ===========================================================================
  # # Accumulators (4) [idk why section IV.c. gave this its own block]
  # # ===========================================================================

  - !Component                                                                    # accumulators that sit below the 16 blocks (one accumulator per block, s0 we have 16 of them)
    name: accumulator
    <<<: [*component_defaults, *keep_outputs, *no_coalesce]
    subclass: flexdcim_accumulator
    attributes: {width: OUTPUT_BITS, <<: *cim_component_attributes}
    area_scale: ACCUMULATOR_AREA_SCALE
    energy_scale: ACCUMULATOR_ENERGY_SCALE

  - !Component                                                                    # CiM unit stores weights and computes MACs
    <<<: *cim_unit

  - !Hierarchical                                                                 # Virtualize an XxYxZ-bit MAC as multiple MAC units
    nodes: *virtualized_mac                                                       # Defined in include/defines.yaml